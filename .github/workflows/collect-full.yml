name: Alpine-APK-Collection (Full)
run-name: ${{ github.actor }} is Collecting New RPMs for ${{ github.ref_name }} ðŸš€
on:
  workflow_dispatch:

jobs:
  Date:
    runs-on: ubuntu-24.04
    outputs:
      Date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get current date
        id: DATE
        run: |
          echo "Setting Date"
          echo "DATE=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
          echo -e "\nWrote to file:\n$GITHUB_OUTPUT\n"
          echo "Values:"
          cat $GITHUB_OUTPUT

      - name: Get disk space
        id: DISK
        run: |
          echo -e "\nUser ID:\n$(id)"
          df -h
          echo -e "\nDisk List"
          sudo fdisk -l | grep -i disk
          echo -e "\nPermissions on /mnt"
          ls -alht /mnt

  Collect-APKs:
    needs: [Date]
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ github.token }}
      WORKDIR: /mnt/${{vars.COLLECTOR }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          echo "PATH=$PATH:$PWD/scripts" >> $GITHUB_ENV

      - name: Run Collection for ${{ vars.COLLECTOR }}
        run: |
          sudo mkdir -p ${{ env.WORKDIR }}
          sudo chown -R $USER ${{ env.WORKDIR }}
          cd ${{ env.WORKDIR }}
          echo "Collecting ${{ vars.COLLECTOR }} APKs"
          # Rsync only the latest version and selected repos/arch
          rsync -av \
            --update \
            --hard-links \
            --delete \
            --delete-after \
            --delay-updates \
            --timeout=600 \
            --include "v3.21/" \
            --include "v3.21/main/" \
            --include "v3.21/main/x86_64/" \
            --exclude "*" \
            rsync://rsync.alpinelinux.org/alpine ${{ env.WORKDIR }}

      - name: Show Files
        run: ls -Alht ${{ env.WORKDIR }}

      - name: List disks
        run: df -h ${{ env.WORKDIR }}

      # - name: Upload reposync log
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.log
      #     path: ${{ env.WORKDIR }}/${{ vars.COLLECTOR }}.log
      #     if-no-files-found: error

      - name: Show Consumption
        run: |
          echo -e "Disk Usage $(du -chs ${{ env.WORKDIR }}/${{ vars.COLLECTOR }})\n"
          echo -e "Disk Space $(df -h ${{ env.WORKDIR }}/)"

      - name: Copy README to ${{ vars.COLLECTOR }} ISO
        run: cp -v README.md ${{ env.WORKDIR }}

      - name: ISO Table of contents
        run: |
          tree ${{ env.WORKDIR }} \
            | tee ${{ env.WORKDIR }}/${{ vars.COLLECTOR}}-${{ needs.Date.outputs.Date }}.iso.txt

      - name: Upload ISO ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.txt
          path: ${{ env.WORKDIR }}/${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.txt
          if-no-files-found: error

      - name: Make ${{ vars.COLLECTOR }} ISO
        run: |
          echo "Making ISO of ${{ vars.COLLECTOR }}"
          mkisofs -J -R -v -T -l \
            -V ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }} \
            -A ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }} \
            -o ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso \
            ${{ env.WORKDIR }}

      - name: Implant MD5 sum into ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso
        run: implantisomd5 /mnt/${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso

      - name: Generate ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso Hash
        run: |
          cd ${{ env.WORKDIR }}
          sha256sum -b ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso | tee \
            ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.sha

      - name: Show ISO & Hash
        run: ls -sS1h ${{ env.WORKDIR }}/*.iso*

      - name: Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso
          path: ${{ env.WORKDIR }}/${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso
          if-no-files-found: error

      - name: Upload ISO Hash
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.sha
          path: ${{ env.WORKDIR }}/${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.sha

      # Cleanup
      - name: Clean up
        run: |
          cd ${{ env.WORKDIR }}
          echo "Remove ${{ vars.COLLECTOR }}"
          rm -rf ${{ vars.COLLECTOR }}
          echo "Remove Artifacts"
          rm -rfv ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso
          rm -rfv ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.sha
          rm -rfv ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.txt
          echo "Done"

  # Release:
  #   runs-on: ubuntu-24.04
  #   needs: [Date, Collect-RPMs]
  #   permissions:
  #     contents: write
  #     pull-requests: read
  #   env:
  #     GH_TOKEN: ${{ github.token }}
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v4

  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         merge-multiple: true
  #         pattern: "*.iso.*"

  #     - name: Show Artifacts
  #       run: ls -sS1h *.iso.*

  #     # Section to actually create a release
  #     - name: Set up git
  #       run: |
  #         git config user.name "$(git log -n 1 --pretty=format:%an)"
  #         git config user.email "$(git log -n 1 --pretty=format:%ae)"

  #     - name: Create tag
  #       uses: rickstaa/action-create-tag@v1
  #       id: tag_create
  #       with:
  #         tag: ${{ needs.Date.outputs.Date }}-Full
  #         github_token: ${{secrets.GITHUB_TOKEN}}
  #         tag_exists_error: false
  #         message: "Release for ${{ needs.Date.outputs.Date }} Full run"

  #     - name: Create Release
  #       id: create_release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         name: ${{ vars.COLLECTOR }}-Full ${{ needs.Date.outputs.Date }}
  #         tag_name: ${{ needs.Date.outputs.Date }}-Full
  #         make_latest: true
  #         files: |
  #           /mnt/*.iso.*
# Upload to Sharepoint Job
  Sharepoint:
    runs-on: ubuntu-24.04
    needs: [Date, Collect-APKs]
    permissions:
      contents: write
      pull-requests: read
    env:
      GH_TOKEN: ${{ github.token }}
    steps:

      - name: Setup upload directory
        run: |
          echo "Create mnt directory and bindmount"
          echo -e "\nUser ID:\n$(id)"
          mkdir -p mnt
          sudo mount --bind -o umask=022,gid=118,uid=1001 /mnt mnt
          sudo chown -R runner:docker /mnt
          # echo -e "\nFile Listing\n$(ls -alht mnt)"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso*"
          path: mnt

      - name: List Artifacts
        run: |
          echo -e "\nDisk mounts:\n$(df -h|grep mnt)"
          echo -e "\nFile Listing:\n$(ls -1sSh mnt/*.iso*)"

      # Send Artifacts to Sharepoint
      - name: Send ${{ env.REPO }} ISO artifacts to Sharepoint
        uses: amentumcms/sharepoint-file-upload-action@main
        with:
          file_path: "mnt/*.iso*"
          host_name: "${{ secrets.SHAREPOINT_HOST }}"
          site_name: "${{ secrets.SHAREPOINT_SITE }}"
          upload_path: "${{ secrets.SHAREPOINT_BASEPATH }}/${{ vars.COLLECTOR }}/${{ needs.Date.outputs.Date }}"
          tenant_id: ${{ secrets.SHAREPOINT_TENANT_ID }}
          client_id: ${{ secrets.SHAREPOINT_APP_ID }}
          client_secret: ${{ secrets.SHAREPOINT_APP_SECRET }}
          login_endpoint: "login.microsoftonline.us"
          graph_endpoint: "graph.microsoft.us"